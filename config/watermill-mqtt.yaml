# Watermill MQTT Configuration for External MQTT Broker Connection
brokerType: mqtt

# MQTT Broker Connection Configuration
mqtt:
  broker: ssl://mqtt-broker.example.com:8883
  clientId: rule-router
  username: "rule-router-service"
  password: "secure-mqtt-password"
  qos: 0                               # QoS 0 for high throughput (fire and forget)
  
  # TLS Configuration for Secure Connection
  tls:
    enable: true
    certFile: "/etc/ssl/mqtt/client-cert.pem"
    keyFile: "/etc/ssl/mqtt/client-key.pem"
    caFile: "/etc/ssl/mqtt/ca.pem"
    insecure: false                    # Set to true to skip certificate verification

# Watermill Configuration (MQTT-optimized)
watermill:
  router:
    closeTimeout: 30s                  # Graceful shutdown timeout
  
  performance:
    batchSize: 50                      # Smaller batches for MQTT (vs NATS)
    batchTimeout: 500ms                # Faster batch timeout for responsiveness
    bufferSize: 4096                   # Processing buffer size
  
  middleware:
    retryMaxAttempts: 3                # Retry failed message processing
    retryInterval: 200ms               # Slightly longer interval for MQTT
    metricsEnabled: true               # Enable comprehensive metrics
    tracingEnabled: false              # Disable for performance

# Logging Configuration
logging:
  level: info                          # debug, info, warn, error
  outputPath: stdout                   # stdout or file path
  encoding: json                       # json or console

# Prometheus Metrics Configuration
metrics:
  enabled: true
  address: :2112
  path: /metrics
  updateInterval: 15s

# Rule Processing Configuration
processing:
  workers: 4                           # Rule processing worker threads
  queueSize: 1000                      # Internal processing queue size
  batchSize: 50                        # Smaller batches optimized for MQTT

# Example configurations for different MQTT brokers:

# For AWS IoT Core:
# mqtt:
#   broker: ssl://your-iot-endpoint.iot.us-east-1.amazonaws.com:8883
#   clientId: rule-router
#   username: ""                       # Not used with certificate auth
#   password: ""                       # Not used with certificate auth
#   qos: 0
#   tls:
#     enable: true
#     certFile: "/etc/ssl/aws-iot/device-cert.pem"
#     keyFile: "/etc/ssl/aws-iot/device-key.pem"
#     caFile: "/etc/ssl/aws-iot/root-ca.pem"
#     insecure: false

# For Azure IoT Hub:
# mqtt:
#   broker: ssl://your-hub.azure-devices.net:8883
#   clientId: your-device-id
#   username: "your-hub.azure-devices.net/your-device-id/?api-version=2021-04-12"
#   password: "SharedAccessSignature sr=..."
#   qos: 0
#   tls:
#     enable: true
#     certFile: ""                     # Certificate path if using cert auth
#     keyFile: ""                      # Key path if using cert auth
#     caFile: "/etc/ssl/azure-iot/baltimore-root-ca.pem"
#     insecure: false

# For Eclipse Mosquitto with TLS:
# mqtt:
#   broker: ssl://mosquitto.example.com:8883
#   clientId: rule-router
#   username: mqtt-user
#   password: mqtt-password
#   qos: 0
#   tls:
#     enable: true
#     certFile: "/etc/ssl/mosquitto/client-cert.pem"
#     keyFile: "/etc/ssl/mosquitto/client-key.pem"
#     caFile: "/etc/ssl/mosquitto/ca.pem"
#     insecure: false

# For HiveMQ Cloud:
# mqtt:
#   broker: ssl://your-cluster.hivemq.cloud:8883
#   clientId: rule-router
#   username: your-hivemq-username
#   password: your-hivemq-password
#   qos: 0
#   tls:
#     enable: true
#     certFile: ""                     # Usually not needed for HiveMQ Cloud
#     keyFile: ""                      # Usually not needed for HiveMQ Cloud
#     caFile: ""                       # Usually not needed for HiveMQ Cloud
#     insecure: false                  # HiveMQ Cloud uses valid certificates
