# NATS Rule Router Configuration
# High-Performance Message Routing with NATS JetStream and Key-Value Store Support
# Featuring Local KV Cache for Maximum Edge Performance

# NATS Server Connection and JetStream Configuration
nats:
  # Connection URLs - supports multiple servers for high availability
  urls:
    - nats://nats-server-1:4222
    - nats://nats-server-2:4222
    - nats://nats-server-3:4222
  
  # Authentication Options (choose one)
  # Option 1: Username/Password
  username: "rule-router-service"
  password: "secure-password"
  
  # Option 2: Token Authentication
  # token: "your-nats-token"
  
  # Option 3: NKey Authentication  
  # nkey: "your-nkey-here"
  
  # Option 4: JWT with .creds file (recommended for production)
  # credsFile: "/etc/nats/creds/rule-router.creds"
  
  # TLS Configuration
  tls:
    enable: true
    certFile: "/etc/ssl/nats/client-cert.pem"
    keyFile: "/etc/ssl/nats/client-key.pem"
    caFile: "/etc/ssl/nats/ca.pem"
    insecure: false  # Skip certificate verification (NOT recommended for production)
  
  # JetStream Consumer Configuration
  consumers:
    # Performance Tuning
    subscriberCount: 8        # Concurrent workers per subscription (recommend: 2-4x CPU cores)
    fetchBatchSize: 64        # Messages to fetch per pull request
                              # - 1 = lowest latency, immediate processing
                              # - 10-100 = balanced throughput and latency
                              # - 100+ = maximum throughput, higher latency
    
    fetchTimeout: 5s          # Max wait time when fetching messages
                              # - Lower (1s) = more aggressive, higher CPU
                              # - Higher (5s+) = more efficient, allows heartbeat
                              # Note: For fetchTimeout > 1.5s, automatic heartbeat is enabled
                              #       For fetchTimeout <= 1.5s, heartbeat is omitted (conflicts with NATS constraints)
    
    maxAckPending: 1000       # Max unacknowledged messages per consumer
                              # Controls backpressure and memory usage
                              # Increase for high throughput scenarios
    
    # Reliability Settings
    ackWaitTimeout: 30s       # Time to wait for ack before redelivery
                              # Increase if message processing takes longer
    
    maxDeliver: 3             # Max redelivery attempts before giving up
                              # Failed messages move to dead letter after this
    
    # Delivery Behavior
    deliverPolicy: all        # Options:
                              # - all: Process all messages (including historical)
                              # - new: Only process new messages (ignore backlog)
                              # - last: Start from most recent message
                              # - by_start_time: Start from specific timestamp
                              # - by_start_sequence: Start from specific sequence number
    
    replayPolicy: instant     # Options:
                              # - instant: Deliver messages as fast as possible
                              # - original: Replay messages at original timing intervals
  
  # NATS Connection Behavior
  connection:
    maxReconnects: -1         # -1 = unlimited reconnection attempts
                              # 0 = no reconnects, >0 = specific number of attempts
    reconnectWait: 50ms       # Wait time between reconnection attempts

  # Action Publish Configuration
  publish:
    # Mode determines how rule actions are published:
    # - "jetstream": Publish to JetStream with ack confirmation (default)
    #   * Reliable: Actions persisted to stream before ack
    #   * Slower: ~50-100μs per publish (depends on stream config)
    #   * Requires: Stream must exist for action subject
    #   * Best for: Critical actions that must not be lost
    #
    # - "core": Publish to core NATS (fire-and-forget)
    #   * Fast: ~10-20μs per publish
    #   * No persistence: Actions lost if no subscribers listening
    #   * No requirements: Works with any subject
    #   * Best for: High-throughput scenarios, non-critical actions
    mode: jetstream
    
    # Ack timeout for JetStream publishes (only used in jetstream mode)
    # How long to wait for stream ack before considering publish failed
    ackTimeout: 5s
    
    # Max retries for failed publish operations (applies to both modes)
    # Failed publishes will be retried with exponential backoff
    maxRetries: 3
    
    # Base delay for retry exponential backoff (applies to both modes)
    # Actual delays: 50ms, 100ms, 200ms (for 3 retries)
    retryBaseDelay: 50ms

# NATS Key-Value Store Configuration with Local Cache
kv:
  enabled: true
  buckets:
    - "device_status"         # Device operational status
    - "device_config"         # Device configuration and thresholds
    - "customer_data"         # Customer metadata for enrichment
    - "feature_flags"         # Feature toggles and A/B testing
    - "system_config"         # System-wide configuration
  
  # Local Cache Configuration - High Performance In-Memory KV Cache
  localCache:
    enabled: true             # Enable in-memory KV caching (default: true)
    # When enabled:
    # - All KV data loaded into memory at startup (~25x faster lookups: 50μs → 2μs)
    # - Real-time updates via KV Watch API
    # - Significant CPU reduction (10-15 percentage points at high throughput)
    # - Memory usage: ~1MB per 1000 KV entries
    # 
    # Set to false to disable caching (useful for troubleshooting or memory constraints)

# Logging Configuration
logging:
  level: info                 # Options: debug, info, warn, error
                              # debug: Verbose logging for development/troubleshooting
                              # info: Standard operational logging
                              # warn: Only warnings and errors
                              # error: Only errors
  
  outputPath: stdout          # Output destination: stdout, stderr, or file path
                              # Examples: stdout, /var/log/rule-router.log
  
  encoding: json              # Log format: json or console
                              # json: Structured logging for log aggregation
                              # console: Human-readable for development

# Prometheus Metrics Configuration
metrics:
  enabled: true
  address: :2112              # HTTP server address for metrics endpoint
  path: /metrics              # Metrics endpoint path
  updateInterval: 15s         # How often to update gauge metrics
