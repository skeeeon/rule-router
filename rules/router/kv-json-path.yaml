# NATS Key-Value JSON Path Examples
# Format: @kv.bucket.key:json.path.to.field
# The colon (:) delimiter separates key from JSON path

# Example KV Data Setup:
# customer_data["cust123"] = {
#   "tier": "premium",
#   "profile": {
#     "name": "Acme Corp",
#     "contact": {"email": "admin@acme.com", "phone": "+1-555-0123"}
#   },
#   "shipping": {
#     "preferences": {"method": "next_day", "carrier": "FedEx"},
#     "addresses": [
#       {"type": "primary", "city": "Seattle", "zip": "98101"},
#       {"type": "secondary", "city": "Portland", "zip": "97201"}
#     ]
#   },
#   "billing": {"plan": "enterprise", "credits": 1500}
# }

# Example 1: Basic JSON Path Traversal with Colon Delimiter
# Message: {"customer_id": "cust123", "order_value": 2500}
- trigger:
    nats:
      subject: orders.premium
  conditions:
    operator: and
    items:
      - field: "@kv.customer_data.{customer_id}:tier"              # ✅ Colon separates key from path
        operator: eq
        value: "premium"
      - field: "@kv.customer_data.{customer_id}:billing.credits"   # ✅ Nested JSON path
        operator: gt
        value: 1000
  action:
    nats:
      subject: fulfillment.premium-customer
      payload: |
        {
          "customer": {
            "id": {customer_id},
            "tier": "{@kv.customer_data.{customer_id}:tier}",
            "name": "{@kv.customer_data.{customer_id}:profile.name}",
            "email": "{@kv.customer_data.{customer_id}:profile.contact.email}"
          },
          "shipping": {
            "method": "{@kv.customer_data.{customer_id}:shipping.preferences.method}",
            "carrier": "{@kv.customer_data.{customer_id}:shipping.preferences.carrier}"
          },
          "billing": {
            "plan": "{@kv.customer_data.{customer_id}:billing.plan}",
            "available_credits": "{@kv.customer_data.{customer_id}:billing.credits}"
          },
          "order_value": {order_value},
          "processed_at": "{@timestamp()}"
        }

# Example 2: Array Access in JSON Path
# Access array elements using colon delimiter: key:path.0.field
- trigger:
    nats:
      subject: shipping.address-lookup
  conditions:
    operator: and
    items:
      - field: customer_id
        operator: exists
      - field: "@kv.customer_data.{customer_id}:shipping.addresses.0.type"  # ✅ Array index after colon
        operator: eq
        value: "primary"
  action:
    nats:
      subject: shipping.primary-address
      payload: |
        {
          "customer_id": {customer_id},
          "primary_address": {
            "city": "{@kv.customer_data.{customer_id}:shipping.addresses.0.city}",
            "zip": "{@kv.customer_data.{customer_id}:shipping.addresses.0.zip}",
            "type": "{@kv.customer_data.{customer_id}:shipping.addresses.0.type}"
          },
          "secondary_address": {
            "city": "{@kv.customer_data.{customer_id}:shipping.addresses.1.city}",
            "zip": "{@kv.customer_data.{customer_id}:shipping.addresses.1.zip}",
            "type": "{@kv.customer_data.{customer_id}:shipping.addresses.1.type}"
          },
          "looked_up_at": "{@timestamp()}"
        }

# Example 3: Keys with Dots (WHY WE NEED THE COLON!)
# Key name: "sensor.temp.001" (contains dots)
# device_config["sensor.temp.001"] = {
#   "hardware": {"model": "TempSensor-Pro", "firmware": "2.1.4"},
#   "thresholds": {"min": 10, "max": 35, "critical": 40},
#   "location": {"building": "A", "floor": 3, "room": "server-room"}
# }
- trigger:
    nats:
      subject: sensors.temperature
  conditions:
    operator: and
    items:
      - field: sensor_id
        operator: exists
      - field: temperature
        operator: gt
        value: "@kv.device_config.{sensor_id}:thresholds.max"      # ✅ Key can have dots!
  action:
    nats:
      subject: alerts.temperature-exceeded
      payload: |
        {
          "alert": "Temperature threshold exceeded",
          "sensor": {
            "id": {sensor_id},
            "model": "{@kv.device_config.{sensor_id}:hardware.model}",
            "firmware": "{@kv.device_config.{sensor_id}:hardware.firmware}",
            "location": {
              "building": "{@kv.device_config.{sensor_id}:location.building}",
              "floor": "{@kv.device_config.{sensor_id}:location.floor}",
              "room": "{@kv.device_config.{sensor_id}:location.room}"
            }
          },
          "readings": {
            "current": {temperature},
            "threshold_max": "{@kv.device_config.{sensor_id}:thresholds.max}",
            "threshold_critical": "{@kv.device_config.{sensor_id}:thresholds.critical}"
          },
          "alert_id": "{@uuid7()}",
          "triggered_at": "{@timestamp()}"
        }

# Example 4: System Configuration with Deep JSON Paths
# system_config["email_settings"] = {
#   "smtp": {"host": "smtp.company.com", "port": 587, "tls": true},
#   "templates": {
#     "welcome": {"subject": "Welcome!", "body": "Welcome to our service"},
#     "alert": {"subject": "Alert: {title}", "priority": "high"}
#   }
# }
- trigger:
    nats:
      subject: notifications.send-email
  conditions:
    operator: and
    items:
      - field: email_type
        operator: eq
        value: "alert"
      - field: "@kv.system_config.email_settings:smtp.tls"         # ✅ Deep config access
        operator: eq
        value: true
  action:
    nats:
      subject: email.send-secure
      payload: |
        {
          "email_config": {
            "smtp_host": "{@kv.system_config.email_settings:smtp.host}",
            "smtp_port": "{@kv.system_config.email_settings:smtp.port}",
            "tls_enabled": "{@kv.system_config.email_settings:smtp.tls}"
          },
          "template": {
            "subject": "{@kv.system_config.email_settings:templates.alert.subject}",
            "priority": "{@kv.system_config.email_settings:templates.alert.priority}"
          },
          "message_data": {
            "recipient": {recipient},
            "alert_title": {alert_title}
          },
          "queued_at": "{@timestamp()}"
        }

# Example 5: User Permissions and Feature Flags
# user_permissions["user456"] = {
#   "role": "admin",
#   "features": {"dashboard": true, "reports": true, "admin_panel": true},
#   "limits": {"api_calls_per_hour": 10000, "storage_gb": 100},
#   "preferences": {"theme": "dark", "notifications": {"email": true, "sms": false}}
# }
- trigger:
    nats:
      subject: api.admin-request
  conditions:
    operator: and
    items:
      - field: user_id
        operator: exists
      - field: "@kv.user_permissions.{user_id}:role"               # ✅ Check role
        operator: eq
        value: "admin"
      - field: "@kv.user_permissions.{user_id}:features.admin_panel"  # ✅ Check feature flag
        operator: eq
        value: true
  action:
    nats:
      subject: api.admin-authorized
      payload: |
        {
          "authorization": "Admin API access granted",
          "user": {
            "id": {user_id},
            "role": "{@kv.user_permissions.{user_id}:role}",
            "features": {
              "dashboard": "{@kv.user_permissions.{user_id}:features.dashboard}",
              "reports": "{@kv.user_permissions.{user_id}:features.reports}",
              "admin_panel": "{@kv.user_permissions.{user_id}:features.admin_panel}"
            },
            "limits": {
              "api_calls_per_hour": "{@kv.user_permissions.{user_id}:limits.api_calls_per_hour}",
              "storage_gb": "{@kv.user_permissions.{user_id}:limits.storage_gb}"
            },
            "preferences": {
              "theme": "{@kv.user_permissions.{user_id}:preferences.theme}",
              "email_notifications": "{@kv.user_permissions.{user_id}:preferences.notifications.email}"
            }
          },
          "request_data": {
            "endpoint": {requested_endpoint},
            "method": {http_method}
          },
          "authorized_at": "{@timestamp()}"
        }

# Example 6: Feature Toggles and A/B Testing
# feature_flags["experiment_123"] = {
#   "enabled": true,
#   "variants": {
#     "control": {"weight": 50, "config": {"color": "blue", "cta_text": "Sign Up"}},
#     "test": {"weight": 50, "config": {"color": "green", "cta_text": "Get Started"}}
#   },
#   "targeting": {"user_types": ["premium", "trial"], "regions": ["us", "ca"]}
# }
- trigger:
    nats:
      subject: web.page-view
  conditions:
    operator: and
    items:
      - field: experiment_id
        operator: eq
        value: "experiment_123"
      - field: "@kv.feature_flags.{experiment_id}:enabled"         # ✅ Check if experiment enabled
        operator: eq
        value: true
  action:
    nats:
      subject: analytics.experiment-view
      payload: |
        {
          "experiment": {
            "id": {experiment_id},
            "enabled": "{@kv.feature_flags.{experiment_id}:enabled}",
            "control_weight": "{@kv.feature_flags.{experiment_id}:variants.control.weight}",
            "test_weight": "{@kv.feature_flags.{experiment_id}:variants.test.weight}"
          },
          "variant_configs": {
            "control": {
              "color": "{@kv.feature_flags.{experiment_id}:variants.control.config.color}",
              "cta_text": "{@kv.feature_flags.{experiment_id}:variants.control.config.cta_text}"
            },
            "test": {
              "color": "{@kv.feature_flags.{experiment_id}:variants.test.config.color}",
              "cta_text": "{@kv.feature_flags.{experiment_id}:variants.test.config.cta_text}"
            }
          },
          "user": {
            "type": {user_type},
            "region": {user_region}
          },
          "tracked_at": "{@timestamp()}"
        }

# Example 7: Complex Keys with Subject Tokens and Message Variables
# Subject: equipment.pump.maintenance.pump-007.schedule
# Message: {"maintenance_type": "routine", "scheduled_by": "tech-42"}
# equipment_maintenance["pump-007"] = {
#   "schedules": {
#     "routine": {"frequency_days": 30, "duration_hours": 2, "technician_level": "L2"},
#     "emergency": {"response_time_hours": 4, "technician_level": "L3"}
#   }
# }
- trigger:
    nats:
      subject: equipment.*.maintenance.*.schedule
  conditions:
    operator: and
    items:
      - field: "@kv.equipment_maintenance.{@subject.3}:schedules.{maintenance_type}.frequency_days"  # ✅ Complex path
        operator: exists
      - field: maintenance_type
        operator: eq
        value: "routine"
  action:
    nats:
      subject: maintenance.scheduled
      payload: |
        {
          "equipment": {
            "type": "{@subject.1}",
            "id": "{@subject.3}",
            "maintenance_schedule": {
              "type": {maintenance_type},
              "frequency_days": "{@kv.equipment_maintenance.{@subject.3}:schedules.{maintenance_type}.frequency_days}",
              "duration_hours": "{@kv.equipment_maintenance.{@subject.3}:schedules.{maintenance_type}.duration_hours}",
              "required_technician_level": "{@kv.equipment_maintenance.{@subject.3}:schedules.{maintenance_type}.technician_level}"
            }
          },
          "scheduling": {
            "scheduled_by": {scheduled_by},
            "scheduled_at": "{@timestamp()}",
            "maintenance_id": "{@uuid7()}"
          }
        }

# Example 8: Keys with Multiple Dots (Complex Hierarchical Keys)
# Key: "logs.api.auth.service.v2" (dots in key name)
# logs["logs.api.auth.service.v2"] = {
#   "errors": {"count": 42, "rate_per_min": 3.5},
#   "latency": {"p50": 120, "p95": 450, "p99": 890}
# }
- trigger:
    nats:
      subject: monitoring.service-health
  conditions:
    operator: and
    items:
      - field: service_name
        operator: eq
        value: "logs.api.auth.service.v2"
      - field: "@kv.logs.{service_name}:errors.count"              # ✅ Key with many dots!
        operator: gt
        value: 10
  action:
    nats:
      subject: alerts.service-errors
      payload: |
        {
          "service": {
            "name": {service_name},
            "errors": {
              "count": "{@kv.logs.{service_name}:errors.count}",
              "rate_per_min": "{@kv.logs.{service_name}:errors.rate_per_min}"
            },
            "latency": {
              "p50": "{@kv.logs.{service_name}:latency.p50}",
              "p95": "{@kv.logs.{service_name}:latency.p95}",
              "p99": "{@kv.logs.{service_name}:latency.p99}"
            }
          },
          "alert_id": "{@uuid7()}",
          "triggered_at": "{@timestamp()}"
        }
